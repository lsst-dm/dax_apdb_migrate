
################
General concepts
################


Alert Production Database (APDB) schema is relatively simple but it is expected to be updated during APDB lifetime.
`DMTN-269`_ provides some details on motivation and design of the APDB schema migration tools.
There are two implementations of APDB - SQL-based and Cassandra-based.
SQL backend uses `Alembic`_ for implementation of the migration process.
There is currently no migration support implemented for Cassandra.


Versions
========

APDB schema is a product of its configuration defined in `sdm_schemas`_ package and the code in `dax_apdb`_ package that translates configuration into an actual database schema.
Updates to any of these two components could result in database schema change, thus the resulting database schema can be identified by two version numbers:

  - version of ``sdm_schemas/yml/abdb.yaml`` configuration,
  - version of the code in ``dax_apdb``.

To support compatibility the numbering of both of this version uses regular semantic versioning approach in format ``MAJOR.MINOR.PATCH``.
Both versions are recorded in the database in a special ``metadata`` table and they are checked by APDB code against current versions of the code and ``apdb.yaml``.
``metadata`` table did not exist in the initial APDB implementation, when this table is missing, APDB code assumes ``0.1.0`` for both versions.
Version compatibility rules are defined to allow operation on compatible schemas.


SQL Backend
===========

SQL backend utilizes `Alembic`_ for managing migrations and performing actual migrations.
``apdb-migrate-sql`` script wraps some of the Alembic tools and adds APDB-specific features.
This section describes details that are relevant for Alembic-based implementation.

Alembic Revisions
-----------------

Alembic schema management tools use *revisions* to define a particular version of the schema; the revision can be arbitrary string.
Most commonly in Alembic one revision is used for the whole database schema, but it is also possible to define multiple revisions for one schema, with each revision reflecting the state of some part of the schema.
Alembic itself has no knowledge of which tables correspond to which part of the schema or revision; this mapping is the responsibility of the migration scripts.
The only thing that Alembic records in its special ``alembic_version`` table is the current state of the schema as one or more revisions.

Because APDB needs to track two versions, the Alembic revision history consists of two revision trees named "schema" and "ApdbSql".
The tools in this package define mapping between version numbers used by APDB code and Alembic revisions.
Usually Alembic revision is a concatenation of a tree name and version numbers, e.g. ``schema_0.1.0``.
There are also special pseudo-revisions with the names that end with "_root" which correspond to possible branches, if there is a need to create an Alembic revision branch.

Here is an example of revision history for schema tree (newest revisions at the top)::

    $ apdb-migrate-sql show-history schema
    schema_0.1.0 -> schema_0.1.1 (schema) (head), Migration script for schema 0.1.1.
    schema_root -> schema_0.1.0 (schema), Migration script for schema 0.1.0.
    <base> -> schema_root (schema), An initial pseudo-revision of the 'schema' tree.


Alembic Migration Scripts
-------------------------

Alembic revision history is defined as a collection of migration scripts, which are Python scripts with predefined structure.
Every script represents a single step in a migration tree and defines several attributes, two most important among them are its target revision and a parent (or "down") revision.
Alembic does not define a separate structure for describing migration trees, that structure is deduced from the whole collection of migration scripts by connecting their parent revisions with other scripts.
``dax_apdb_migrate`` keeps the collection of migration scripts in ``migrations/sql`` folder, with a separate sub-folder for each revision tree.
New migration scripts are created by running ``apdb-migrate-sql add-revision`` command with appropriate arguments.
CLI commands have an option to specify different location for migration scripts, if necessary.


Alembic configuration
---------------------

In addition to migration scripts Alembic is driven by its configuration.
Part of the Alembic configuration is generated by ``apdb-migrate-sql`` commands based on command line options (e.g. connection to SQL database).
A remaining static part of the configuration is located in ``migrations/sql/_alembic`` folder and includes:

- ``env.py`` - Python code managing database connection and schema options,
- ``script.py.mako`` - template for generating new migration scripts.


Cassandra Backend
=================

Cassandra backend also uses `Alembic`_ for managing migrations and performing actual migrations.
Migration scripts for Cassandra cannot use ``SQLAlchemy`` or ``Alembic`` API for querying or updating database.
Instead a simple interface is provided for migration scripts for performing database operations using CQL query language.
``apdb-migrate-cassandra`` script wraps some of the Alembic tools and adds APDB-specific features.
This section describes details that are relevant for Alembic-based implementation.

.. note::
  Many Cassandra operations are non-transactional, if a problem happens during schema migration, it can leave database in inconsistent state.
  In such cases manual intervention will be required to restore the database to the previous state.

Alembic Revisions
-----------------

Revision names used by Alembic are constructed similarly to SQL casa contatenating a tree name and a version number, separated by underscore (e.g. ``schema_0.1.0``).
Revision tree names used by Cassandra are:

- ``schema`` - corresponds to the schema definition in ``sdm_schemas``,
- ``ApdbCassandra`` - corresponds to the version of the code in ``ApdbCassandra`` class,
- ``ApdbCassandraReplica`` - corresponds to the version of the code in ``ApdbCassandraReplica`` class.

Unlike SQL case, we do not record revision names in the database itself, instead we use version numbers stored in ``metadata`` table to generate Alembic revisions in a temporary SQLite database used by Alembic.
In all other respects the management of the revisions and miration scripts looks very similar to SQL case.

Here is an example of revision history for schema tree (newest revisions at the top)::

    $ apdb-migrate-cassandra show-history ApdbCassandra
    ApdbCassandra_0.1.0 -> ApdbCassandra_0.1.1 (ApdbCassandra) (head), Migration script for ApdbCassandra 0.1.1.
    ApdbCassandra_root -> ApdbCassandra_0.1.0 (ApdbCassandra), Migration script for ApdbCassandra 0.1.0.
    <base> -> ApdbCassandra_root (ApdbCassandra), The initial pseudo-revision of the 'ApdbCassandra' tree.

Alembic Migration Scripts
-------------------------

``dax_apdb_migrate`` keeps the collection of migration scripts in ``migrations/cassandra`` folder, with a separate sub-folder for each revision tree.
New migration scripts are created by running ``apdb-migrate-cassandra add-revision`` command with appropriate arguments.
CLI commands have an option to specify different location for migration scripts, if necessary.


Alembic configuration
---------------------

In addition to migration scripts Alembic is driven by its configuration.
Part of the Alembic configuration is generated by ``apdb-migrate-cassandra`` commands based on command line options (e.g. connection to Cassandra).
A remaining static part of the configuration is located in ``migrations/sql/_alembic`` folder and includes:

- ``env.py`` - Python code managing database connection and schema options,
- ``script.py.mako`` - template for generating new migration scripts.



.. _DMTN-269: https://dmtn-269.lsst.io/
.. _Alembic: https://alembic.sqlalchemy.org/
.. _sdm_schemas: https://github.com/lsst/sdm_schemas
.. _dax_apdb: https://github.com/lsst/dax_apdb
